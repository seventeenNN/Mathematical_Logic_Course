
小组成员：李钰杰22009200957、秦玥22009290012、李珂22009290052


   * Installation *

To install CSeq, please follow the steps below:

    1. make sure that Python 2.7.14 and GNU gcc (for preprocessing)
       are installed on the system

    2. create a directory, suppose this is called /workspace

    3. extract the entire package contents in /workspace

    4. install the backend of choice in backends/
      (for the list of supported backend, please see modules/feeder.py)

    5. make sure that the default parameters and the command line
      (in feeder.py) are correct for the backend of choice.



   * Usage *

To try CSeq, please use the following command:

    ./cseq.py -l lazy -i examples/lazy_unsafe.c --backend cbmc

which should report the file to be unsafe.
Invoking the tool without options:

    ./cseq.py

will provide further usage directions.


感想：在搭建 lazycseq 工具时，最初的过程略显复杂，需要仔细配置各种依赖环境，按照文档逐步操作，期间遇到一些版本兼容问题，但通过查阅资料和社区求助最终得以解决，这让我对其底层架构有了初步认识，也感受到开源工具在安装便利性上还有提升空间。
其功能丰富多样，涵盖了代码静态分析、复杂数据结构检查以及程序流程验证等多个方面。比如在分析一个较大规模的 C 代码项目时，它能快速定位潜在的内存泄漏风险和逻辑错误，通过直观的报告展示问题所在，大大节省了人工排查代码问题的时间，提高了代码质量保障的效率。
使用过程中，虽然命令行操作对于新手有一定学习成本，但随着使用次数增多逐渐熟练。它的参数设置灵活，能够根据不同的分析需求进行定制化，不过这也需要对工具的功能有深入理解才能更好地发挥其优势。总体而言，lazycseq 是一款功能强大且实用的代码分析工具，尽管在搭建和上手初期有一定困难，但在深入掌握后，为代码开发和优化工作带来了显著的帮助，期待它在未来能进一步优化使用体验和拓展功能。




